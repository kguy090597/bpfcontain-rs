/* automatically generated by rust-bindgen 0.56.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const TASK_COMM_LEN: u32 = 16;
pub const PATH_MAX: u32 = 4096;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub mod policy_decision_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_NO_DECISION: Type = 0;
    pub const BPFCON_ALLOW: Type = 1;
    pub const BPFCON_DENY: Type = 2;
    pub const BPFCON_TAINT: Type = 4;
}
pub mod file_permission_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_MAY_EXEC: Type = 1;
    pub const BPFCON_MAY_WRITE: Type = 2;
    pub const BPFCON_MAY_READ: Type = 4;
    pub const BPFCON_MAY_APPEND: Type = 8;
    pub const BPFCON_MAY_CREATE: Type = 16;
    pub const BPFCON_MAY_DELETE: Type = 32;
    pub const BPFCON_MAY_RENAME: Type = 64;
    pub const BPFCON_MAY_SETATTR: Type = 128;
    pub const BPFCON_MAY_CHMOD: Type = 256;
    pub const BPFCON_MAY_CHOWN: Type = 512;
    pub const BPFCON_MAY_LINK: Type = 1024;
    pub const BPFCON_MAY_EXEC_MMAP: Type = 2048;
    pub const BPFCON_MAY_CHDIR: Type = 4096;
}
pub mod capability_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_CAP_NET_BIND_SERVICE: Type = 1;
    pub const BPFCON_CAP_NET_RAW: Type = 2;
    pub const BPFCON_CAP_NET_BROADCAST: Type = 4;
    pub const BPFCON_CAP_DAC_OVERRIDE: Type = 8;
    pub const BPFCON_CAP_DAC_READ_SEARCH: Type = 16;
}
pub mod net_category_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_NET_WWW: Type = 1;
    pub const BPFCON_NET_IPC: Type = 2;
}
pub mod net_operation_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_NET_CONNECT: Type = 1;
    pub const BPFCON_NET_BIND: Type = 2;
    pub const BPFCON_NET_ACCEPT: Type = 4;
    pub const BPFCON_NET_LISTEN: Type = 8;
    pub const BPFCON_NET_SEND: Type = 16;
    pub const BPFCON_NET_RECV: Type = 32;
    pub const BPFCON_NET_CREATE: Type = 64;
    pub const BPFCON_NET_SHUTDOWN: Type = 128;
}
pub mod audit_level_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const BC_AUDIT_DENY: Type = 1;
    pub const BC_AUDIT_TAINT: Type = 2;
    pub const BC_AUDIT_ALLOW: Type = 4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct audit_common_t {
    pub decision: policy_decision_t::Type,
    pub policy_id: u64_,
    pub pid: u32_,
    pub tgid: u32_,
    pub comm: [u8_; 16usize],
}
#[test]
fn bindgen_test_layout_audit_common_t() {
    assert_eq!(
        ::std::mem::size_of::<audit_common_t>(),
        40usize,
        concat!("Size of: ", stringify!(audit_common_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_common_t>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_common_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_common_t>())).decision as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_common_t),
            "::",
            stringify!(decision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_common_t>())).policy_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_common_t),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_common_t>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_common_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_common_t>())).tgid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_common_t),
            "::",
            stringify!(tgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_common_t>())).comm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_common_t),
            "::",
            stringify!(comm)
        )
    );
}
impl Default for audit_common_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct audit_file_t {
    pub common: audit_common_t,
    pub access: file_permission_t::Type,
    pub st_ino: u64_,
    pub st_dev: u32_,
}
#[test]
fn bindgen_test_layout_audit_file_t() {
    assert_eq!(
        ::std::mem::size_of::<audit_file_t>(),
        64usize,
        concat!("Size of: ", stringify!(audit_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_file_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_file_t>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_file_t),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_file_t>())).access as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_file_t),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_file_t>())).st_ino as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_file_t),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_file_t>())).st_dev as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_file_t),
            "::",
            stringify!(st_dev)
        )
    );
}
impl Default for audit_file_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct audit_cap_t {
    pub common: audit_common_t,
    pub cap: capability_t::Type,
}
#[test]
fn bindgen_test_layout_audit_cap_t() {
    assert_eq!(
        ::std::mem::size_of::<audit_cap_t>(),
        48usize,
        concat!("Size of: ", stringify!(audit_cap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_cap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_cap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_cap_t>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_cap_t),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_cap_t>())).cap as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_cap_t),
            "::",
            stringify!(cap)
        )
    );
}
impl Default for audit_cap_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct audit_net_t {
    pub common: audit_common_t,
    pub operation: net_operation_t::Type,
}
#[test]
fn bindgen_test_layout_audit_net_t() {
    assert_eq!(
        ::std::mem::size_of::<audit_net_t>(),
        48usize,
        concat!("Size of: ", stringify!(audit_net_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_net_t>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_net_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_net_t>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_net_t),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_net_t>())).operation as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_net_t),
            "::",
            stringify!(operation)
        )
    );
}
impl Default for audit_net_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct audit_ipc_t {
    pub common: audit_common_t,
    pub other_policy_id: u64_,
    pub sender: u8_,
}
#[test]
fn bindgen_test_layout_audit_ipc_t() {
    assert_eq!(
        ::std::mem::size_of::<audit_ipc_t>(),
        56usize,
        concat!("Size of: ", stringify!(audit_ipc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_ipc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_ipc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_ipc_t>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_ipc_t),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_ipc_t>())).other_policy_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_ipc_t),
            "::",
            stringify!(other_policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_ipc_t>())).sender as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_ipc_t),
            "::",
            stringify!(sender)
        )
    );
}
impl Default for audit_ipc_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type policy_id_t = u64_;
pub type container_id_t = u64_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct policy_t {
    pub default_deny: u8_,
    pub default_taint: u8_,
}
#[test]
fn bindgen_test_layout_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<policy_t>(),
        2usize,
        concat!("Size of: ", stringify!(policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_t>(),
        1usize,
        concat!("Alignment of ", stringify!(policy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_t>())).default_deny as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_t),
            "::",
            stringify!(default_deny)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_t>())).default_taint as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_t),
            "::",
            stringify!(default_taint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct process_t {
    pub container_id: container_id_t,
    pub host_pid: u32_,
    pub host_tgid: u32_,
    pub pid: u32_,
    pub tgid: u32_,
}
#[test]
fn bindgen_test_layout_process_t() {
    assert_eq!(
        ::std::mem::size_of::<process_t>(),
        24usize,
        concat!("Size of: ", stringify!(process_t))
    );
    assert_eq!(
        ::std::mem::align_of::<process_t>(),
        8usize,
        concat!("Alignment of ", stringify!(process_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<process_t>())).container_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(process_t),
            "::",
            stringify!(container_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<process_t>())).host_pid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(process_t),
            "::",
            stringify!(host_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<process_t>())).host_tgid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(process_t),
            "::",
            stringify!(host_tgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<process_t>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(process_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<process_t>())).tgid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(process_t),
            "::",
            stringify!(tgid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct container_t {
    pub policy_id: policy_id_t,
    pub container_id: container_id_t,
    pub mnt_ns_id: u32_,
    pub pid_ns_id: u32_,
    pub refcount: u32_,
    pub tainted: u8_,
    pub uts_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_container_t() {
    assert_eq!(
        ::std::mem::size_of::<container_t>(),
        48usize,
        concat!("Size of: ", stringify!(container_t))
    );
    assert_eq!(
        ::std::mem::align_of::<container_t>(),
        8usize,
        concat!("Alignment of ", stringify!(container_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(container_t),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container_t>())).container_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(container_t),
            "::",
            stringify!(container_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container_t>())).mnt_ns_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(container_t),
            "::",
            stringify!(mnt_ns_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container_t>())).pid_ns_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(container_t),
            "::",
            stringify!(pid_ns_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container_t>())).refcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(container_t),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container_t>())).tainted as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(container_t),
            "::",
            stringify!(tainted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container_t>())).uts_name as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(container_t),
            "::",
            stringify!(uts_name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct fs_policy_key_t {
    pub policy_id: u64_,
    pub device_id: u32_,
}
#[test]
fn bindgen_test_layout_fs_policy_key_t() {
    assert_eq!(
        ::std::mem::size_of::<fs_policy_key_t>(),
        12usize,
        concat!("Size of: ", stringify!(fs_policy_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fs_policy_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(fs_policy_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fs_policy_key_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_policy_key_t),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fs_policy_key_t>())).device_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_policy_key_t),
            "::",
            stringify!(device_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct file_policy_key_t {
    pub policy_id: u64_,
    pub inode_id: u64_,
    pub device_id: u32_,
}
#[test]
fn bindgen_test_layout_file_policy_key_t() {
    assert_eq!(
        ::std::mem::size_of::<file_policy_key_t>(),
        20usize,
        concat!("Size of: ", stringify!(file_policy_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<file_policy_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(file_policy_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_policy_key_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_policy_key_t),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_policy_key_t>())).inode_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_policy_key_t),
            "::",
            stringify!(inode_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_policy_key_t>())).device_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_policy_key_t),
            "::",
            stringify!(device_id)
        )
    );
}
pub const MINOR_WILDCARD: s64 = -1;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct dev_policy_key_t {
    pub policy_id: u64_,
    pub major: u32_,
    pub minor: s64,
}
#[test]
fn bindgen_test_layout_dev_policy_key_t() {
    assert_eq!(
        ::std::mem::size_of::<dev_policy_key_t>(),
        20usize,
        concat!("Size of: ", stringify!(dev_policy_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<dev_policy_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(dev_policy_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dev_policy_key_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_policy_key_t),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dev_policy_key_t>())).major as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_policy_key_t),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dev_policy_key_t>())).minor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_policy_key_t),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct subdir_policy_key_t {
    pub policy_id: u64_,
    pub inode_id: u64_,
    pub device_id: u32_,
}
#[test]
fn bindgen_test_layout_subdir_policy_key_t() {
    assert_eq!(
        ::std::mem::size_of::<subdir_policy_key_t>(),
        20usize,
        concat!("Size of: ", stringify!(subdir_policy_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<subdir_policy_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(subdir_policy_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subdir_policy_key_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(subdir_policy_key_t),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subdir_policy_key_t>())).inode_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(subdir_policy_key_t),
            "::",
            stringify!(inode_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subdir_policy_key_t>())).device_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(subdir_policy_key_t),
            "::",
            stringify!(device_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct cap_policy_key_t {
    pub policy_id: u64_,
}
#[test]
fn bindgen_test_layout_cap_policy_key_t() {
    assert_eq!(
        ::std::mem::size_of::<cap_policy_key_t>(),
        8usize,
        concat!("Size of: ", stringify!(cap_policy_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cap_policy_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(cap_policy_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cap_policy_key_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cap_policy_key_t),
            "::",
            stringify!(policy_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct net_policy_key_t {
    pub policy_id: u64_,
}
#[test]
fn bindgen_test_layout_net_policy_key_t() {
    assert_eq!(
        ::std::mem::size_of::<net_policy_key_t>(),
        8usize,
        concat!("Size of: ", stringify!(net_policy_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<net_policy_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(net_policy_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<net_policy_key_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(net_policy_key_t),
            "::",
            stringify!(policy_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ipc_policy_key_t {
    pub policy_id: u64_,
    pub other_policy_id: u64_,
}
#[test]
fn bindgen_test_layout_ipc_policy_key_t() {
    assert_eq!(
        ::std::mem::size_of::<ipc_policy_key_t>(),
        16usize,
        concat!("Size of: ", stringify!(ipc_policy_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_policy_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ipc_policy_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_policy_key_t>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_policy_key_t),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipc_policy_key_t>())).other_policy_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_policy_key_t),
            "::",
            stringify!(other_policy_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct inode_key_t {
    pub inode_id: u64_,
    pub device_id: u32_,
}
#[test]
fn bindgen_test_layout_inode_key_t() {
    assert_eq!(
        ::std::mem::size_of::<inode_key_t>(),
        12usize,
        concat!("Size of: ", stringify!(inode_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<inode_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(inode_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inode_key_t>())).inode_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inode_key_t),
            "::",
            stringify!(inode_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inode_key_t>())).device_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inode_key_t),
            "::",
            stringify!(device_id)
        )
    );
}
extern "C" {
    pub fn containerize(policy_id: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
