/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub mod PolicyDecision {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_NO_DECISION: Type = 0;
    pub const BPFCON_ALLOW: Type = 1;
    pub const BPFCON_DENY: Type = 2;
    pub const BPFCON_TAINT: Type = 4;
}
pub mod FilePermission {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_MAY_EXEC: Type = 1;
    pub const BPFCON_MAY_WRITE: Type = 2;
    pub const BPFCON_MAY_READ: Type = 4;
    pub const BPFCON_MAY_APPEND: Type = 8;
    pub const BPFCON_MAY_CREATE: Type = 16;
    pub const BPFCON_MAY_DELETE: Type = 32;
    pub const BPFCON_MAY_RENAME: Type = 64;
    pub const BPFCON_MAY_SETATTR: Type = 128;
    pub const BPFCON_MAY_CHMOD: Type = 256;
    pub const BPFCON_MAY_CHOWN: Type = 512;
    pub const BPFCON_MAY_LINK: Type = 1024;
    pub const BPFCON_MAY_EXEC_MMAP: Type = 2048;
    pub const BPFCON_MAY_CHDIR: Type = 4096;
}
pub mod Capability {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_CAP_NET_BIND_SERVICE: Type = 1;
    pub const BPFCON_CAP_NET_RAW: Type = 2;
    pub const BPFCON_CAP_NET_BROADCAST: Type = 4;
    pub const BPFCON_CAP_DAC_OVERRIDE: Type = 8;
    pub const BPFCON_CAP_DAC_READ_SEARCH: Type = 16;
}
pub mod NetCategory {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_NET_WWW: Type = 1;
    pub const BPFCON_NET_IPC: Type = 2;
}
pub mod NetOperation {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPFCON_NET_CONNECT: Type = 1;
    pub const BPFCON_NET_BIND: Type = 2;
    pub const BPFCON_NET_ACCEPT: Type = 4;
    pub const BPFCON_NET_LISTEN: Type = 8;
    pub const BPFCON_NET_SEND: Type = 16;
    pub const BPFCON_NET_RECV: Type = 32;
    pub const BPFCON_NET_CREATE: Type = 64;
    pub const BPFCON_NET_SHUTDOWN: Type = 128;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EventAction {
    EA_UNKNOWN = 0,
    EA_ERROR = 1,
    EA_DENY = 2,
    EA_IMPLICIT_DENY = 3,
    EA_TAINT = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EventType {
    ET_NONE = 0,
    ET_FILE = 1,
    ET_CAP = 2,
    ET_NET = 3,
    ET_IPC = 4,
    ET_NO_SUCH_CONTAINER = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct file_info {
    pub inode_id: u64_,
    pub device_id: u32_,
    pub access: FilePermission::Type,
}
#[test]
fn bindgen_test_layout_file_info() {
    assert_eq!(
        ::std::mem::size_of::<file_info>(),
        16usize,
        concat!("Size of: ", stringify!(file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<file_info>(),
        8usize,
        concat!("Alignment of ", stringify!(file_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_info>())).inode_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_info),
            "::",
            stringify!(inode_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_info>())).device_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_info),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_info>())).access as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(file_info),
            "::",
            stringify!(access)
        )
    );
}
impl Default for file_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FileInfo = file_info;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct cap_info {
    pub cap: Capability::Type,
}
#[test]
fn bindgen_test_layout_cap_info() {
    assert_eq!(
        ::std::mem::size_of::<cap_info>(),
        4usize,
        concat!("Size of: ", stringify!(cap_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cap_info>(),
        4usize,
        concat!("Alignment of ", stringify!(cap_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cap_info>())).cap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cap_info),
            "::",
            stringify!(cap)
        )
    );
}
impl Default for cap_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CapInfo = cap_info;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct net_info {
    pub operation: NetOperation::Type,
}
#[test]
fn bindgen_test_layout_net_info() {
    assert_eq!(
        ::std::mem::size_of::<net_info>(),
        4usize,
        concat!("Size of: ", stringify!(net_info))
    );
    assert_eq!(
        ::std::mem::align_of::<net_info>(),
        4usize,
        concat!("Alignment of ", stringify!(net_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<net_info>())).operation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(net_info),
            "::",
            stringify!(operation)
        )
    );
}
impl Default for net_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type NetInfo = net_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ipc_info {
    pub sender_pid: u32_,
    pub receiver_pid: u32_,
    pub sender_id: u64_,
    pub receiver_id: u64_,
}
#[test]
fn bindgen_test_layout_ipc_info() {
    assert_eq!(
        ::std::mem::size_of::<ipc_info>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ipc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info>())).sender_pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info),
            "::",
            stringify!(sender_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info>())).receiver_pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info),
            "::",
            stringify!(receiver_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info>())).sender_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info),
            "::",
            stringify!(sender_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info>())).receiver_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info),
            "::",
            stringify!(receiver_id)
        )
    );
}
pub type IPCInfo = ipc_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpfcon_event_info {
    pub type_: EventType,
    pub info: bpfcon_event_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpfcon_event_info__bindgen_ty_1 {
    pub file_info: FileInfo,
    pub cap_info: CapInfo,
    pub net_info: NetInfo,
    pub ipc_info: IPCInfo,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_bpfcon_event_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<bpfcon_event_info__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(bpfcon_event_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<bpfcon_event_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(bpfcon_event_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bpfcon_event_info__bindgen_ty_1>())).file_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_event_info__bindgen_ty_1),
            "::",
            stringify!(file_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bpfcon_event_info__bindgen_ty_1>())).cap_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_event_info__bindgen_ty_1),
            "::",
            stringify!(cap_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bpfcon_event_info__bindgen_ty_1>())).net_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_event_info__bindgen_ty_1),
            "::",
            stringify!(net_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bpfcon_event_info__bindgen_ty_1>())).ipc_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_event_info__bindgen_ty_1),
            "::",
            stringify!(ipc_info)
        )
    );
}
impl Default for bpfcon_event_info__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_bpfcon_event_info() {
    assert_eq!(
        ::std::mem::size_of::<bpfcon_event_info>(),
        32usize,
        concat!("Size of: ", stringify!(bpfcon_event_info))
    );
    assert_eq!(
        ::std::mem::align_of::<bpfcon_event_info>(),
        8usize,
        concat!("Alignment of ", stringify!(bpfcon_event_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bpfcon_event_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_event_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bpfcon_event_info>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_event_info),
            "::",
            stringify!(info)
        )
    );
}
impl Default for bpfcon_event_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type EventInfo = bpfcon_event_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct event {
    pub action: EventAction,
    pub policy_id: u64_,
    pub pid: u32_,
    pub tgid: u32_,
    pub comm: [u8_; 16usize],
    pub info: EventInfo,
}
#[test]
fn bindgen_test_layout_event() {
    assert_eq!(
        ::std::mem::size_of::<event>(),
        72usize,
        concat!("Size of: ", stringify!(event))
    );
    assert_eq!(
        ::std::mem::align_of::<event>(),
        8usize,
        concat!("Alignment of ", stringify!(event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).action as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).policy_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).tgid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(tgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).comm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(comm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).info as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(info)
        )
    );
}
impl Default for event {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Event = event;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct policy {
    pub default_deny: u8_,
    pub default_taint: u8_,
}
#[test]
fn bindgen_test_layout_policy() {
    assert_eq!(
        ::std::mem::size_of::<policy>(),
        2usize,
        concat!("Size of: ", stringify!(policy))
    );
    assert_eq!(
        ::std::mem::align_of::<policy>(),
        1usize,
        concat!("Alignment of ", stringify!(policy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy>())).default_deny as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy),
            "::",
            stringify!(default_deny)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy>())).default_taint as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(policy),
            "::",
            stringify!(default_taint)
        )
    );
}
pub type Policy = policy;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct bpfcon_process {
    pub policy_id: u64_,
    pub pid: u32_,
    pub tgid: u32_,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_bpfcon_process() {
    assert_eq!(
        ::std::mem::size_of::<bpfcon_process>(),
        24usize,
        concat!("Size of: ", stringify!(bpfcon_process))
    );
    assert_eq!(
        ::std::mem::align_of::<bpfcon_process>(),
        8usize,
        concat!("Alignment of ", stringify!(bpfcon_process))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bpfcon_process>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_process),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bpfcon_process>())).pid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_process),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bpfcon_process>())).tgid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bpfcon_process),
            "::",
            stringify!(tgid)
        )
    );
}
impl bpfcon_process {
    #[inline]
    pub fn in_execve(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_in_execve(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tainted(&self) -> u8_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tainted(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(in_execve: u8_, tainted: u8_) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let in_execve: u8 = unsafe { ::std::mem::transmute(in_execve) };
            in_execve as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tainted: u8 = unsafe { ::std::mem::transmute(tainted) };
            tainted as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type Process = bpfcon_process;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct fs_policy_key {
    pub policy_id: u64_,
    pub device_id: u32_,
}
#[test]
fn bindgen_test_layout_fs_policy_key() {
    assert_eq!(
        ::std::mem::size_of::<fs_policy_key>(),
        12usize,
        concat!("Size of: ", stringify!(fs_policy_key))
    );
    assert_eq!(
        ::std::mem::align_of::<fs_policy_key>(),
        1usize,
        concat!("Alignment of ", stringify!(fs_policy_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fs_policy_key>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_policy_key),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fs_policy_key>())).device_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_policy_key),
            "::",
            stringify!(device_id)
        )
    );
}
pub type FsPolicyKey = fs_policy_key;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct file_policy_key {
    pub policy_id: u64_,
    pub inode_id: u64_,
    pub device_id: u32_,
}
#[test]
fn bindgen_test_layout_file_policy_key() {
    assert_eq!(
        ::std::mem::size_of::<file_policy_key>(),
        20usize,
        concat!("Size of: ", stringify!(file_policy_key))
    );
    assert_eq!(
        ::std::mem::align_of::<file_policy_key>(),
        1usize,
        concat!("Alignment of ", stringify!(file_policy_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_policy_key>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_policy_key),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_policy_key>())).inode_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_policy_key),
            "::",
            stringify!(inode_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_policy_key>())).device_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_policy_key),
            "::",
            stringify!(device_id)
        )
    );
}
pub type FilePolicyKey = file_policy_key;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct dev_policy_key {
    pub policy_id: u64_,
    pub major: u32_,
    pub minor: u32_,
}
#[test]
fn bindgen_test_layout_dev_policy_key() {
    assert_eq!(
        ::std::mem::size_of::<dev_policy_key>(),
        16usize,
        concat!("Size of: ", stringify!(dev_policy_key))
    );
    assert_eq!(
        ::std::mem::align_of::<dev_policy_key>(),
        1usize,
        concat!("Alignment of ", stringify!(dev_policy_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dev_policy_key>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_policy_key),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dev_policy_key>())).major as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_policy_key),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dev_policy_key>())).minor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_policy_key),
            "::",
            stringify!(minor)
        )
    );
}
pub type DevPolicyKey = dev_policy_key;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct cap_policy_key {
    pub policy_id: u64_,
}
#[test]
fn bindgen_test_layout_cap_policy_key() {
    assert_eq!(
        ::std::mem::size_of::<cap_policy_key>(),
        8usize,
        concat!("Size of: ", stringify!(cap_policy_key))
    );
    assert_eq!(
        ::std::mem::align_of::<cap_policy_key>(),
        1usize,
        concat!("Alignment of ", stringify!(cap_policy_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cap_policy_key>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cap_policy_key),
            "::",
            stringify!(policy_id)
        )
    );
}
pub type CapPolicyKey = cap_policy_key;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct net_policy_key {
    pub policy_id: u64_,
}
#[test]
fn bindgen_test_layout_net_policy_key() {
    assert_eq!(
        ::std::mem::size_of::<net_policy_key>(),
        8usize,
        concat!("Size of: ", stringify!(net_policy_key))
    );
    assert_eq!(
        ::std::mem::align_of::<net_policy_key>(),
        1usize,
        concat!("Alignment of ", stringify!(net_policy_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<net_policy_key>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(net_policy_key),
            "::",
            stringify!(policy_id)
        )
    );
}
pub type NetPolicyKey = net_policy_key;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ipc_policy_key {
    pub policy_id: u64_,
    pub other_policy_id: u64_,
}
#[test]
fn bindgen_test_layout_ipc_policy_key() {
    assert_eq!(
        ::std::mem::size_of::<ipc_policy_key>(),
        16usize,
        concat!("Size of: ", stringify!(ipc_policy_key))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_policy_key>(),
        1usize,
        concat!("Alignment of ", stringify!(ipc_policy_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_policy_key>())).policy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_policy_key),
            "::",
            stringify!(policy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_policy_key>())).other_policy_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_policy_key),
            "::",
            stringify!(other_policy_id)
        )
    );
}
pub type IPCPolicyKey = ipc_policy_key;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct inode_key {
    pub inode_id: u64_,
    pub device_id: u32_,
}
#[test]
fn bindgen_test_layout_inode_key() {
    assert_eq!(
        ::std::mem::size_of::<inode_key>(),
        12usize,
        concat!("Size of: ", stringify!(inode_key))
    );
    assert_eq!(
        ::std::mem::align_of::<inode_key>(),
        1usize,
        concat!("Alignment of ", stringify!(inode_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inode_key>())).inode_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inode_key),
            "::",
            stringify!(inode_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inode_key>())).device_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inode_key),
            "::",
            stringify!(device_id)
        )
    );
}
pub type InodeKey = inode_key;
extern "C" {
    pub fn containerize(policy_id: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
